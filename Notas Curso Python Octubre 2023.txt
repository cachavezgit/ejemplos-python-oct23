Lunes 2Oct23

Python
	Puesto en públic en 1991
	Multiparadigm
		OOP, Scripting Language, Functional

Python is used in many different contexts, such as system programming, web and
API programming, GUI applications, gaming and robotics, rapid prototyping,
system integration, data science, database applications, real-time communication,
and much more. Several prestigious universities have also adopted Python as their
main language in computer science courses.

Python 2.7
	-> 2020

Python 3
	2008 --->

Python 3.12 2Oct23  ----> Pre-release

import sys
print(sys.version)

Install Python
	Microsoft Store  ----> Python 3.7

	https://www.python.org/   ---> Downloads

	Distribuciones ---> ML/Data Science   Anaconda

	https://www.python.org/downloads/

IDE
	python.exe ----> immediate interpreter..... exit()
	Visual Studio Code
	PyCharm (JetBrains) Community Edition y Pro Edition
	Jupyter Notebooks https://jupyter.org/
		https://bootstrap.pypa.io/get-pip.py
		python get-pip.py
			PATH:
				C:\Users\cachavez\AppData\Local\Programs\Python\Python312	
				C:\Users\cachavez\AppData\Local\Programs\Python\Python312\Scripts

		python --version      -V
		pip --version         -V

		pip install notebook      <-------- pip (js npm, yarn. php composer. java maven/gradle. c# nuget)
			Mandó un error de dependencias

		https://jupyter.org/try-jupyter/retro/notebooks/?path=Untitled1.ipynb (Jupyter Notebooks Online)

			Intro to Python.ipynb

	https://www.sololearn.com/compiler-playground


VIRTUAL ENVIRONMENTS

Creación de virtual environments
	python -m venv wilson    <---- wilson es el nombre del virtual environment (Ahí se creo)

	python -m venv venv\wilson <------ venv\ con miras a gitignorarlo el folder de los venvs

Para poder utilizar un venv se tiene que activar

	wilson\Scripts\activate

Para desactivarlo
	deactivate

Para borrarlo
	Se elimina la carpeta del virtual environment

Una vez activado el virtual environment instalamos las dependencias (mismas que quedan asociadas con el venv)

	pip install flask  (Flask es un framework web más minimalista que Django)

pip install flask	---------> virtual environment

pip install django	---------> virtual environment
pip install requests   	---------> virtual environment

	pip freeze > requirements.txt     <---- todas las dependencias del virtual env se van a registrar en requirements.txt

	pip install -r requirements.txt   <---- instala todas las dependencias necesarias para armar el proyecto

EJERCICIO

	Crear un folder llamada data-science-python
	Inicializar un virtual environment venv\...
	Activar el ambiente
	Instalar las librerias NumPy, SciPy, Matplotlib
		pip install numpy
		pip install scipy
		pip install -U matplotlib
	Generar el archivo requirements.txt

pyversions  <---- PENDIENTE

Martes 3Oct23

Organización de código

	python scripts (equivalente bash kornshell powershell) .py

	Proyecto Python

		modules ----> archivos .py
		packages ----> folders marcados con __init__.py
		libraries ----> from math import factorial

		namespaces
			from library.second_floor.section_x.row_three import book

SCOPES
	local
	enclosing ---> cuando una función encierra (encloses) a otra función
	global
	*built-in  print

	local --> enclosing ----> global ----> built-in ----> undefined (error no está definido)

	(LEGB)


OOP
	class constructors
	object

class Persona:
	def __init__():

	.....

IDEs
	Visual Studio Code
	PyCharm
	Sublime Text
	Atom
	Jupyter Notebooks (ML, Data Science)  -> https://jupyter.org/

DATA TYPES

Toda asignacion de una variable desemboca en un objeto que tiene Id y tiene Type

Se puede saber el id de un objeto con la función bult-in de Python id()

1574429238208
1574429238256  

1574429238208  
1574429238256  

numero1 = -7
numero2 = 4
print(numero1//numero2)   -----> -2
print(int(numero1 / numero2))  ---> -1

	integer division // redondea siempre hacia menos infinito

Elevar a potencias
numero1 = 10
numero1 ** 3
pow(10, 3) 1000 PENDIENTE 3.6 1000.0 ????


booleans

	True o False

	bool(1) bool(333) bool(-455)  True
	bool(0)  False

	bool('a') bool('xytxyxyxyxyxyyx') True
	bool('') False


EJERCICIO: adivina_numero.py

	Le preguntara un numero al usuario entre 1 y 10

	y verificara contra un numero al azar si lo adivino

from random import randint

value = randint(1,10)
print(value)

input()  <----- built in function para pedir entrada de la consola.
int() <--- convertir a entero

Real Numbers

	Todo numero con . es tratado con doble precision

	>>> import sys
	>>> sys.float_info

	math.floor(num)
	round(num,2)

Fractions, Decimals, Complex Numbers

STRINGS

" "
' '
"""
"""

'''
'''

f-strings  --> String Interpolation 3.6 --->

mensaje = f"El area de un circulo con radio {radio} es igual a {round(resultado,2)}"

"Hello, %s. You are %s." % (name, age) <----- Python antes de la 3.6

Miércoles 5Oct23

	python -V  --version
	pip -V  --version

	módulos ----> .py

	Built-In Modules
		https://docs.python.org/3.10/py-modindex.html#cap-m

	Built-In Functions
		https://docs.python.org/3.10/library/functions.html?highlight=built

	Documentación
		https://docs.python.org/

	pyenv
		Multiples versiones de python
		https://k0nze.dev/posts/install-pyenv-venv-vscode/


	data types (immutables non-immutables)
		variable ----> objeto.... id, type, value
		
		Python, as a dynamically typed language, offers various data types to handle different kinds of information. 

		GC (Garbage Collection)

	Immutable datatypes are those whose values cannot be changed after they are created. Any attempt to modify an immutable object will result in the creation of a new object.

		int, float, complex, string, tuple

	EJERCICIO:
		Agregar un módulo que se llame buscador.py

			con una funcion que se llame buscarCadenaEnArchivo(loquebusco, ondi)

			buscarCadenaEnArchivo('Mango', 'C:\Users\cachavez\curso-python\extras\frutas.txt')

			linea.find(palabra)    <--------- -1 si no existe

			"La palabra Mango si existe en el archivo"

Advantages of Tuple over List in Python
https://www.programiz.com/python-programming/tuple

Since tuples are quite similar to lists, both of them are used in similar situations.

However, there are certain advantages of implementing a tuple over a list:

We generally use tuples for heterogeneous (different) data types and lists for homogeneous (similar) data types.
Since tuples are immutable, iterating through a tuple is faster than with a list. So there is a slight performance boost.
Tuples that contain immutable elements can be used as a key for a dictionary. With lists, this is not possible.
If you have data that doesn't change, implementing it as tuple will guarantee that it remains write-protected.

Mutable Datatypes
Mutable datatypes, in contrast to immutable datatypes, can be modified after creation. 
These objects can have their values updated, added, or removed without creating a new object.

List

from math import prod
lista = []
lista.append("Ivan")
lista.append("Maria")
lista.append(56)

lista = list("Parangaricutirimicuaro")
lista.pop(2)
lista.remove('i')
print(lista)
print(type(lista))

lista = [10,20,30,40,50]
print(id(lista))
lista = [1,2,3,4,5]
print(id(lista))

numeros = [9,8,2]
print(prod(numeros))
print(numeros)
print(sorted(numeros))

lista_combinada = [(2,3),(9,8),(1,3),(7,5),(1,9),(9,1)]
print(lista_combinada)
print(min(lista_combinada))
print(max(lista_combinada))
print(sorted(lista_combinada))


Ejercicio:

	Crear una funcion en el modulo compara_listas.py que reciba dos listas

	El resultado debera ser una nueva lista con los elementos que coincidan en ambas listas 
		y el numero de elementos que coincidieron

Jueves 5Oct23

Set

conjunto1 = set()

conjunto1.add(1000)
conjunto1.add(2000)
conjunto1.add(3000)

Tuple ---> ()
Lists ----> []
Set ------> {} non-suscriptable, no repetidos,add/remove
	frozenset ---> no tiene add() ni remove()

Dictionary ----> K,V  -----> Key, Value
	{k:v,k:v,k:v}

Ejercicio:
	Implementar usando diccionarios un contador de palabras en un archivo

DATES AND TIMES

from datetime import datetime
datetime.now()
datetime.utcnow()


#print(datetime.utcnow()) en 3.12 ya no ejecuta datetime.utcnow()
A partir de la version 3.12.0 se hace así:

from datetime import datetime, timezone
utc = datetime.now(tz=timezone.utc)

arrow --- external library for date and time

	pip install -U arrow

	import arrow
	print(arrow.utcnow())

Módulos
	main.py
	arimerica.py

Condicionales
	if ________ :
		....

	if ______:
	
	else:
	 _________

	if
	elif
	elif
	elif
	else:

	variable=(cond)?si_se_cumple:si_no_se_cumple <------C#

	(terciario)
	variable = si_se_cumple if cond else no_se_cumple

	switch?? <--------- no hay switch o case en Python < 3.10

	En python 3.10 existe la palabra match

Lunes 9Oct23
	tuples, list, set, dictionary	

	for
		---> range
		---> sequence

range:
print(range(10))

for x in range(10):
    print(x)

for y in range(1,6):
    print(y)

for z in range(2,20,2):   <----- (start, stop, step)    stop es excluded
    print(z)

ciudades = ["Mexicali","Monterrey","Villahermosa"]
for ciudad in range(len(ciudades)):
    print(ciudades[ciudad])

sequence:
	for ciudad in ciudades:
	    print(ciudad)

n = 987
remainders = []
while n > 0:
    remainder = n % 2 # remainder of division by 2
    remainders.append(remainder) # we keep track of remainders
    n //= 2 # we divide n by 2
remainders.reverse()
print(remainders)


	Ejercicio: factorial.py 
		while

		5 x 4 x 3 x 2 x 1    = 120

break & continue
	break -> finaliza totalmente el ciclo normalmente en base a una condicion
	continue -> finaliza la iteración actual y avanza a la siguiente


class DriverException(Exception):
    pass

people = [('James', 17), ('Kirk', 9), ('Lars', 13), ('Robert', 8)]
driver = None

for person, age in people:
    if age >= 18:
        driver = (person, age)
        break

if driver is None:
    raise DriverException('Driver not found.')


Ejercicio:
	Crear un archivo productos.txt

		Cargador Usb, 90
		Llavero, 40
		Engrapadora, 20


	crear el programa procesa-productos.py

		Leera el archivo de productos
		iterarara por todas las lines o productos, obteniendo tuplas producto,precio
		en funcion del dia de la semana, imprimira el producto y el precio con descuento:
			lunes, miércoles, viernes: 10%
			sábados y domingos no descuenta nada
			martes y jueves: 15%


		para pruebas agregarle a la fecha del dia un intervalo aleatorio de 0 a 6 dias

Martes 10Oct23

Funciones
	def ________():
		__________
		__________
		__________

	input parameters y el return son opcionales

	Una función puede encerrar a otras funciones "nested function" dentro de una "enclosing function"

	def demo(x): <-------- el comportamiento interno dependerá si es mutable o inmutable el parámetro
		x = 8

	z=9
	demo(z)

INMUTABLES: (Strings, Numbers, Tuples)
z = "mensaje"
def cambia(x):
    print(x)   <----- "mensaje"
    x = "otra cosa" <------ "otra cosa"
    print(x)

cambia(z) 
print(z) <---- "mensaje"

MUTABLES (Lists, Dictionaries, Sets)
lista = [1,2,3]
def cambiamutable(x):
    print(x)
    #x = [1000,2000,3000]
    x[1] = 1000
    print(x)

cambiamutable(lista)
print(lista)

Funciones pueden tener argumentos de forma opcional y se pueden alimentar:
	- Posicional (izq a der)

from datetime import date

def imprime_datos(nombre, numero, fecha):
    print(f"Nombre: {nombre} - Numero: {numero} Fecha: {fecha}")

imprime_datos("Wilson", 1023, date.today()) # Posicional

imprime_datos(fecha=date.today(), nombre="Maria", numero=12.34) #Keyword

info_para_la_funcion = ("Maria", 123, date.today())
imprime_datos(*info_para_la_funcion) #Iterable unpacking *

diccionario_argumentos = {'nombre':'Wilson', 'numero':123,'fecha':date.today()}
imprime_datos(**diccionario_argumentos) #Dictionary unpacking **

Optional Parameters

Ejercicio:
	BuscarPalabrasEnArchivo:
		una funcion que reciba palabras a buscar en un archivo (longitud variable)

Positional-only Parameters:
	def func(a, b, /, c)   <------ a y b son posicional only
		print(a, b, c)			

Keyword-only Parameters
	def func(a, b, *, c) <-------- a y b son keyword only parameters
		print(a, b, c)

FUNCIONES map, zip, filter
	--------> funciones anónimas o lambda

MAP

def eleva_al_cubo(num):
    return num**3

print(eleva_al_cubo(3))
lista_de_numeros = [2,3,4,5,6,7,8,9,10]

resultado = list(map(eleva_al_cubo, lista_de_numeros))
resultado2 = list(map(lambda gato: gato**3, lista_de_numeros))

print(resultado)

class Demo:
    pass

class Coordenada:
    x = 0
    y = 0

    def __init__(self, x, y):
        self.x=x
        self.y=y

PROGRAMACIÓN ORIENTADA A OBJETOS (OOP)

	- Abstracción, Encapsulamiento, Herencia, Polimorfismo

		Abstracción y Encapsulamiento ---> class

	Ejercicio: Definir la clase Triangulo, Cuadrado, Circulo y programa_figuras.py
	Crear una lista con "surtido rico" de instancias de las 3 clases
	Imprimir a partir de la lista el area sólo de los triangulos

Miércoles 11Oct23

	Clases		class Triangulo:
	Instances	t1 = Triangulo(10,8)  <------ no hay operador new

	Class attributes ----> definidos por la clase
	Instance attributes ---> agregados a la instancia

	Hasta Python 3.12 no existe la idea de Constructor Overloading ni de Method Overloading
		Overload ---> Definir más de una vez con diferente combinación de argumentos

Clase puede tener 1 sólo constructor y 1 sola implementación de los métodos

class Persona:
    nombre = ''
    apellido = ''
    def __init__():
        nombre = "No definido"		<---------- IGNORADO
        apellido = "No definido"

    def __init__(self,n,a):
        self.nombre = n
        self.apellido = a

    def devuelveNumero(self):		<---------- IGNORADO
        print(8)
    
    def devuelveNumero(self,x):
        print(x)

Las clases en Python sí pueden heredar de otras. Es decir se soporta la generalizacion

	class DriverException(Exception):
	    pass

	Es generalización porque DriverException "is a" Driver

	Es una relación de abajo hacia arriba. Parent-Child, Superclass-SubClass, Base-Derived


class Parent:
    color_de_cabello = 'negro'

class Child(Parent): #Child inherits from Parent
    pass

c = Child
print(c.color_de_cabello)

MULTIPLE INHERITANCE:
class A:
    label = 'a'

class B(A):
    pass

class C(A):
    label = 'c'

class D(B,C):
    pass

d = D()
print(d.label)

STATIC METHODS Y CLASS METHODS
class StringUtil:
    @staticmethod
    def is_palindrome(s, case_insensitive=True):
        # we allow only letters and numbers
        s = ''.join(c for c in s if c.isalnum()) # Study this!
        # For case insensitive comparison, we lower-case s
        if case_insensitive:
            s = s.lower()
        for c in range(len(s) // 2):
            if s[c] != s[-c -1]:
                return False
        return True

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    @classmethod
    def from_tuple(cls, coords): # cls is Point
        return cls(*coords) # <--- devuelve una instancia de la clase Point

    @classmethod
    def from_point(cls, point): # cls is Point
        return cls(point.x, point.y)

PRIVATE METHODS

Defining Private Methods and Attributes 
To define a private attribute or method in python, you have to just prefix the name with a single underscore(_).

Ejercicio:
	banco.py
		Cuenta
	   Chequera   Tarjeta

		Chequera -> propiedad linea_sobregiro
							=> validacion que no permita negativos si acaso genera un ValueError
		Tarjeta -> propiedad limite_de_credito

class Tarjeta(Cuenta):
    _limite_de_credito = 0

    def __init__(self,limite):
        self._limite_de_credito = limite

    @property
    def limite_de_credito(self):
        return self._limite_de_credito
    
    @limite_de_credito.setter
    def limite_de_credito(self,limite):
        if limite < 0:
            raise ValueError('Limite de crédito debe de ser positivo')
        self._limite_de_credito = limite

Jueves 12Oct23

PACKAGES

Python uses some terms that you may not be familiar with if you’re coming from a different language. 
Among these are scripts, modules, packages, and libraries.

Script (.py)
A script is a Python file that’s intended to be run directly. When you run it, it should do something. 
This means that scripts will often contain code written outside the scope of any classes or functions.

	----> devops

Module (.py)
A module is a Python file that’s intended to be imported into scripts or other modules. 
It often defines members like classes, functions, and variables intended to be used in other files that import it.

	aritmeticabasica.py  ----> funciones suma, resta ....
	geometria.py ----> clases de figuras

Package (folder)
A package is a collection of related modules that work together to provide certain functionality. 
These modules are contained within a folder and can be imported just like any other modules. 
This folder will often contain a special __init__ file that tells Python it’s a package, potentially containing 
more modules nested within subfolders

	un package es estrictamente un folder, que antes de 3.4 era obligatorio incluirle el archivo de __init__.py

	import math
	import random
	from datetime import date, dateoffset
	
	python incluye en cualquier versión un set estandar de paquetes (built-in)

Library
A library is an umbrella term that loosely means “a bundle of code.” These can have tens or even hundreds 
of individual modules that can provide a wide range of functionality. 
Matplotlib is a plotting library. 
The Python Standard Library contains hundreds of modules for performing common tasks, 
like sending emails or reading JSON data. What’s special about the Standard Library is that it comes bundled with 
your installation of Python, so you can use its modules without having to download them from anywhere.

En python los modulos (.py)
	pueden programarse en python y en lenguaje c

import mod
import mod as modulo_funcional

from mod import *
from mod import mensaje, lista, Gato, eleva_al_cuadrado
from mod import mensaje, lista, Gato as Minimo, eleva_al_cuadrado

Python packages

Suppose you have developed a very large application that includes many modules. As the number of modules grows, 
it becomes difficult to keep track of them all if they are dumped into one location. 
This is particularly so if they have similar names or functionality. 
You might wish for a means of grouping and organizing them.

Packages allow for a hierarchical structuring of the module namespace using dot notation. 
In the same way that modules help avoid collisions between global variable names, 
packages help avoid collisions between module names.

Creating a package is quite straightforward, since it makes use of the operating system’s inherent hierarchical 
file structure. 

	package1  <-------- Python package que tiene 2 Python modules
		mod1.py
		mod2.py

from paquete1.mod2 import Triangulo as Triang

Package initialization

If a file named __init__.py is present in a package directory, it is invoked when the package or a module 
in the package is imported. 
This can be used for execution of package initialization code, such as initialization of package-level data.

	__init__.py  <----- ES OPCIONAL de la 3.4 en adelante

Note: Much of the Python documentation states that an __init__.py file must be present in the package directory 
when creating a package. This was once true. It used to be that the very presence of __init__.py signified to Python 
that a package was being defined. The file could contain initialization code or even be empty, but it had to be present.

Starting with Python 3.3, Implicit Namespace Packages were introduced. <----- no se necesita obligatoriamente
	el __init__.py


try:
    os.chdir("c:\\users\\cachavez")
    os.mkdir("python1")
    print("Se creo exitosamente")
except:
    print("El directorio python1 ya ha sido creado...")


Ejercicio:
	c:\users\cachavez\
	python copiaarchivo.py --folder=datos --nuevoarchivo=copia.txt --origen=demo.txt

		clase con un metodo estático UtileriaArchivos.copia_archivo()
			UtileriaArchivos <<<<----clase que puede estar en un modulo dentro de otro paquete

	- si el folder no existe no haya una excepcion

import shutil

Viernes 13Oct23

importacion de paquetes

\
	copia_archivo.py
		paquete1
		paquete2
			sub-paquete2
				utilerias.py

	from paquete2.sub-paquete2.utilerias import UtileriaArchivos
	------------------------------->

\
	ejecutables
		copia_archivo.py
	paquete1
	paquete2
		sub-paquete2
			utilerias.py

		import sys
		sys.path.append("../paquete2/sub_paquete2")
		from utilerias import UtileriaArchivos


import argparse

import sys
sys.path.append("../paquete2/sub_paquete2") #Agregar una ruta al path de búsqueda
from utilerias import UtileriaArchivos

parser = argparse.ArgumentParser()
parser.add_argument("folder")   <------ obligatorio sin el -- 
parser.add_argument("origen")
parser.add_argument("--nuevoarchivo") <----- opcional
argumentos = parser.parse_args()

UtileriaArchivos.copia_archivo(argumentos.folder, argumentos.nuevoarchivo,argumentos.origen)

DEBUGGING CON PYTHON

	- Visual Studio Code (Con la extensión Python)

		Run
			Start Debugging

				Que tipo de proyecto es? Script? Django? FastAPI? ...

		Breakpoints visualmente
		Step Into
		Step Out
		Step Over

	- PyCharm (jetBrains)

	- PDB (Python Debugger)

		import pdb;pdb.set_trace()

		ó				<---- se agrega una o la otra donde vayamos a depurar

		breakpoint()

		Se puede en modo break:
			escribir nombres de variables para ver el valor que tienen
			continue o c (abreviado)

		Comandos de PDB:
			https://realpython.com/python-debugging-pdb/#essential-pdb-commands


DATABASES AND PYTHON
	python -m venv venv\wilson 
	
	venv\wilson\Scripts\activate

		(wilson) C:\Users\cachavez\curso-python>

	pip install mysql-connector-python
	








		

	








